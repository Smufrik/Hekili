name: Create Release

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for the release (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'
      release_title:
        description: 'Release title'
        required: false
        default: 'Release'
      prerelease:
        description: 'Mark as prerelease'
        type: boolean
        default: false

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Extract version from tag
      id: version
      run: |
        if [ "${{ github.event_name }}" = "push" ]; then
          TAG_NAME=${GITHUB_REF#refs/tags/}
        elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          TAG_NAME="${{ github.event.inputs.tag_name }}"
        else
          TAG_NAME=${GITHUB_REF#refs/tags/}
        fi
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "version=${TAG_NAME#v}" >> $GITHUB_OUTPUT
    
    - name: Generate release notes
      id: release_notes
      run: |
        # Get the previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -n "$PREV_TAG" ]; then
          echo "## Changes since $PREV_TAG" >> release_notes.md
          echo "" >> release_notes.md
          git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD >> release_notes.md
        else
          echo "## Initial Release" >> release_notes.md
          echo "" >> release_notes.md
          echo "First release of the addon." >> release_notes.md
        fi
        
        echo "notes<<EOF" >> $GITHUB_OUTPUT
        cat release_notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.tag_name }}
        release_name: ${{ github.event.inputs.release_title || steps.version.outputs.tag_name }}
        body: ${{ steps.release_notes.outputs.notes }}
        draft: false
        prerelease: ${{ github.event.inputs.prerelease || false }}
    
    - name: Create ZIP archive
      run: |
        zip -r Hekili-${{ steps.version.outputs.version }}.zip . -x "*.git*" "*.github*" "*.DS_Store*" "*.vscode*" "node_modules/*" "*.zip" "Documentation/*" "scripts/*" "package*.json" "release.json"
    
    - name: Upload ZIP as Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./Hekili-${{ steps.version.outputs.version }}.zip
        asset_name: Hekili-${{ steps.version.outputs.version }}.zip
        asset_content_type: application/zip
